use rocksdb::WriteBatch;
use serde_derive::{Deserialize, Serialize};

use crate::db::{db, MergeOperation, Table};

use super::ObjectRef;

#[derive(Debug, Clone, Copy, Eq, PartialEq, Ord, PartialOrd, Serialize, Deserialize)]
pub enum BookmarkType {
    /// A bookmark generated by the dependency from other entities in the database.
    Reference,
    /// A bookmark defined by the user.
    User,
}

#[derive(Debug, Clone)]
pub struct Bookmark {
    ty: BookmarkType,
    object: ObjectRef,
}

impl Bookmark {
    pub(crate) fn new(ty: BookmarkType, object: ObjectRef) -> Bookmark {
        Bookmark { ty, object }
    }

    fn key(&self) -> Vec<u8> {
        [
            self.object.hash().as_ref(),
            bincode::serialize(&self.ty)
                .expect("can serialize")
                .as_ref(),
        ]
        .concat()
    }

    pub fn get_count(&self) -> Result<i16, crate::Error> {
        let maybe_key = db().get_cf(Table::Bookmarks.get(), self.key())?;
        let key: MergeOperation = maybe_key
            .map(|key| bincode::deserialize(&key))
            .transpose()?
            .unwrap_or_default();
        Ok(key.eval_on_zero())
    }

    pub fn is_marked(&self) -> Result<bool, crate::Error> {
        Ok(self.get_count()? != 0)
    }

    pub fn mark_with(&self, batch: &mut WriteBatch) {
        let operation = match self.ty {
            BookmarkType::Reference => MergeOperation::Increment(1),
            BookmarkType::User => MergeOperation::Set(1),
        };

        batch.merge_cf(
            Table::Bookmarks.get(),
            self.key(),
            bincode::serialize(&operation).expect("can serialize"),
        )
    }

    pub fn mark(&self) -> Result<(), crate::Error> {
        let mut batch = WriteBatch::default();
        self.mark_with(&mut batch);
        db().write(batch)?;

        Ok(())
    }

    pub fn unmark_with(&self, batch: &mut WriteBatch) {
        let operation = match self.ty {
            BookmarkType::Reference => MergeOperation::Increment(-1),
            BookmarkType::User => MergeOperation::Set(0),
        };

        batch.merge_cf(
            Table::Bookmarks.get(),
            self.key(),
            bincode::serialize(&operation).expect("can serialize"),
        )
    }

    pub fn unmark(&self) -> Result<(), crate::Error> {
        let mut batch = WriteBatch::default();
        self.unmark_with(&mut batch);
        db().write(batch)?;

        Ok(())
    }

    pub fn clear_with(&self, batch: &mut WriteBatch) {
        batch.delete_cf(Table::Bookmarks.get(), self.key())
    }
}
